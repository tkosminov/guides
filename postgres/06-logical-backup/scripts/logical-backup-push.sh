#!/bin/bash

echo "Logical Push Start"

source /var/lib/postgresql/base-config.sh

trap 'catch $? $LINENO' ERR
set -e
catch() {
  echo "Error in ${BASH_SOURCE[1]}:${BASH_LINENO[0]}. '${BASH_COMMAND}' exited with status $1"

  if [ ! -z "$TELEGRAM_CHAT_ID" ] && [ ! -z "$TELEGRAM_TOKEN" ]; then
    curl -X POST \
      -H 'Content-Type: application/json' \
      -d "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"üÜò –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${BACKUP_PROJECT_NAME} –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏\nError in ${BASH_SOURCE[1]}:${BASH_LINENO[0]}. ${BASH_COMMAND} exited with status $1\", \"disable_notification\": true}" \
      https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage
  else
    echo "Logical Push chat_id and token not provided"
  fi
}

# –ø–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
BACKUP_DIR="/tmp/backups"

# –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º –µ—ë
if [ -d "${BACKUP_DIR}" ]; then rm -rf ${BACKUP_DIR}; fi

# —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
mkdir -p ${BACKUP_DIR}/files

# –ø—Ä–µ—Ñ–∏—Ñ–∫—Å/–ø–æ—Å—Ç—Ñ–∏–∫—Å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –±–∞–∑
DB_SEARCH_PATTERN="production"

# —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å –±—ç–∫–∞–ø–∞–º–∏)
CURRENT_TIME=$(date +%Y-%m-%dT%H:%M:%S)

# –ø–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –±–∞–∑
dbNames=$(su - postgres -c "psql -q -A -t -c \"SELECT datname FROM pg_database;\"" | grep ${DB_SEARCH_PATTERN} | awk '{print $1}')

# –¥–µ–ª–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –±–∞–∑
for dbName in ${dbNames}; do
  su - postgres -c "pg_dump -U postgres ${dbName}" >"${BACKUP_DIR}/files/${dbName}.sql"
done

# –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Å –±—ç–∫–∞–ø–∞–º–∏
pushd ${BACKUP_DIR}/files

# –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –±—ç–∫–∞–ø—ã (–∞—Ä—Ö–∏–≤ –∫–ª–∞–¥–µ–º –Ω–∞ 1 –∫–∞—Ç–∞–ª–æ–≥ –≤—ã—à–µ)
if [ "${BACKUP_ENCRYPT}" = true ]; then
  # –µ—Å–ª–∏ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
  tar cf - *.sql | xz -z | gpg --symmetric --cipher-algo aes256 --pinentry-mode loopback --passphrase-file <(echo ${BACKUP_PASS_PHRASE}) - >../${CURRENT_TIME}.tar.xz.gpg
else
  #–µ—Å–ª–∏ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  tar cf - * | xz -z - >../${CURRENT_TIME}.tar.xz
fi

# –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Å –∞—Ä—Ö–∏–≤–æ–º
pushd ${BACKUP_DIR}

# —É–¥–∞–ª—è–µ–º .sql —Ñ–∞–π–ª—ã —Å –±—ç–∫–∞–ø–∞–º–∏
rm -rf ${BACKUP_DIR}/files

# –∑–∞–≥—Ä—É–∂–∞–µ–º –±—ç–∫–∞–ø –≤ –æ–±–ª–∞–∫–æ
if [ "${BACKUP_ENCRYPT}" = true ]; then
  # –µ—Å–ª–∏ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
  /root/.nvm/versions/node/v14.18.2/bin/node /var/lib/postgresql/logical-upload/index.js uploadBackup -p ${BACKUP_DIR}/${CURRENT_TIME}.tar.xz.gpg
else
  # –µ—Å–ª–∏ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  /root/.nvm/versions/node/v14.18.2/bin/node /var/lib/postgresql/logical-upload/index.js uploadBackup -p ${BACKUP_DIR}/${CURRENT_TIME}.tar.xz
fi

# —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
if [ "${BACKUP_ENCRYPT}" = true ]; then
  # –µ—Å–ª–∏ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
  backupSize=$(ls ${CURRENT_TIME}.tar.xz.gpg -lah | awk '{print $5}')
else
  # –µ—Å–ª–∏ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  backupSize=$(ls ${CURRENT_TIME}.tar.xz -lah | awk '{print $5}')
fi

if [ ! -z "$TELEGRAM_CHAT_ID" ] && [ ! -z "$TELEGRAM_TOKEN" ]; then
  curl -X POST \
    -H 'Content-Type: application/json' \
    -d "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"‚úÖ –õ–æ–≥–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${BACKUP_PROJECT_NAME} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n –†–∞–∑–º–µ—Ä ${backupSize}\", \"disable_notification\": true}" \
    https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage
else
  echo "Logical Push chat_id and token not provided"
fi

echo "Logical Push Complete"
